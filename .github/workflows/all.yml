name: CI and tarball generation

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ main ]

env:
  LANG: en_US.UTF-8
  DEBIAN_FRONTEND: noninteractive

jobs:
  build-all:
    runs-on: ubuntu-latest
    container: debian:trixie
    steps:
    - name: Install build dependencies
      run: apt-get update -y && apt-get install -y meson build-essential libgtkmm-3.0-dev golang gcc-arm-none-eabi libnewlib-arm-none-eabi python3 git gstreamer1.0-gtk3 gstreamer1.0-plugins-good libhidapi-dev libgstreamer1.0-dev
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Build bootloader
      working-directory: fw/boot
      run: make -j $(nproc)
    - name: Build firmware
      working-directory: fw/usbkvm
      run: make -j $(nproc)
    - name: Build app
      working-directory: app
      run: |
        mkdir ../build-app
        meson setup ../build-app
        ninja -C ../build-app
    - name: create tarball
      working-directory: app
      run: |
        git config --global --add safe.directory $(realpath ..)
        ./make_tarball.sh
        sha256sum *.tar.gz
    - name: Upload tarball
      uses: actions/upload-artifact@v4
      with:
        name: usbkvm-src
        path: app/*.tar.gz

  test-tarball:
    runs-on: ubuntu-latest
    container: debian:trixie
    needs: build-all
    steps:
    - name: Install build dependencies
      run: apt-get update -y && apt-get install -y meson build-essential libgtkmm-3.0-dev golang python3 gstreamer1.0-gtk3 gstreamer1.0-plugins-good libhidapi-dev libgstreamer1.0-dev
    - name: Download tarball
      uses: actions/download-artifact@v4
      with:
        name: usbkvm-src
    - name: extract tarball
      run: tar xf usbkvm.tar.gz
    - name: Build app
      working-directory: usbkvm
      run: |
        mkdir ../build-app
        meson setup ../build-app
        ninja -C ../build-app
        
  build-win32:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-pkgconf
          mingw-w64-x86_64-gtkmm3
          mingw-w64-x86_64-meson
          mingw-w64-x86_64-python
          mingw-w64-x86_64-gstreamer
          mingw-w64-x86_64-gst-plugin-gtk
          mingw-w64-x86_64-gst-plugins-bad
          mingw-w64-x86_64-gst-plugins-good
          mingw-w64-x86_64-hidapi
          mingw-w64-x86_64-go
          mingw-w64-x86_64-arm-none-eabi-gcc
          make
          git
          zip
          dos2unix
    - name: Build bootloader
      shell: msys2 {0}
      working-directory: fw/boot
      run: make -j $(nproc)
    - name: Build firmware
      shell: msys2 {0}
      working-directory: fw/usbkvm
      run: make -j $(nproc)
    - name: Build app
      shell: msys2 {0}
      working-directory: app
      run: |
        meson setup build
        meson compile -C build
    - name: Make dist
      shell: msys2 {0}
      working-directory: app
      run: ./make_bindist.sh
    - name: set artifact name
      shell: msys2 {0}
      run: echo "artifact_name=usbkvm-win64-$(date +%Y-%m-%d-%H%M)-$(echo ${{ github.ref_name }} | tr / -)" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}
        path: app/dist/*.zip

  release:
    runs-on: ubuntu-latest
    container: debian:trixie
#    if: startsWith(github.ref, 'refs/tags')
    needs: 
      - build-all
      - build-win32
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
    - name: ls
      run: ls
#    - name: Create tag
#      uses: actions/github-script@v7
#      with:
#        script: |
#          tag_name = context.ref_name.
#          github.rest.git.createRef({
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            ref: 'refs/tags/<tagname>',
#            sha: context.sha
#          })
